#+LAYOUT: post
#+TITLE: IPython, bpython and django
#+SUBTITLE: Tricks using ipython and bpython with django
#+DATE: 2015-09-10 21:48
#+liquid: enabled
#+comments: true
#+ipython_link: <a href="http://ipython.org" target="_blank">IPython</a>
#+bpython_link: <a href="http://bpython-interpreter.org/" target="_blank">bpython</a>
#+caption: <span class="caption text-muted"><a href="http://bpython-interpreter.org/screenshots.html" _target="blank">See more screenshots</a></span>
#+image: <center><img src="http://bpython-interpreter.org/images/4.png"></center>

** {{ page.ipython_link }}
I am sure you have used {{ page.ipython_link }} for a number of purposes. For interactive shell, usually because it has some enhancements. You would also probable use it for RELP(Read Eval Print Loop). Let me brag about my favourite editor. RELP comes from the names of Lisp primitive function which implements this functionality, just the reason Emacs acts the way you want it to.

It's a must for a Pythonista to know this. Within any arbitary place in your python code (including django) you can drop into an {{ page.ipython_link }} shell. 

#+BEGIN_QUOTE
You didn't! Try inserting these, in between your codes.
#+END_QUOTE

#+BEGIN_SRC python
from IPython import embed
embed()
#+END_SRC

#+BEGIN_QUOTE
Note: This will not work for older versions of python
#+END_QUOTE

By the way running python manage.py shell in django starts {{ page.ipython_link }} by default if you have installed it.

** {{ page.bpython_link }}

You have used {{ page.bpython }} right! I am sure you loved its auto-complete and syntax highlight features. If you havent used it then, check out the screenshot below.

{{ page.image }} 
{{ page.caption }} 

Did you like it? If you did then you might want to use it for django as well.

Start by modifying your ~/.bashrc to define a python startup environment variable
#+BEGIN_SRC sh
export PYTHONSTARTUP=~/.pythonrc
#+END_SRC

Then insert the following code in ~/.pythonrc!

#+BEGIN_SRC python
try:
    import os
    import sys
    project = os.path.basename( os.getcwd() )
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", project+".settings")
    exec("from %s import settings"%project)
    print('Imported django settings')
    try:
        exec_strs = ["from %s.models import *"%apps for apps in settings.INSTALLED_APPS ]
        for x in exec_strs:
            try:
                exec(x)
            except:
                pass
    except:
        pass
except:
    pass
#+END_SRC

#+BEGIN_QUOTE
Note: This will not work for older versions of python
#+END_QUOTE

Now run 

#+BEGIN_SRC sh
$ exec $SHELL
#+END_SRC

From now, when you go to the django project folder(where manage.py resides) run {{ page.bpython_link }} instead of python manage.py shell
